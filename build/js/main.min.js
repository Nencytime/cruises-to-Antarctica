(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.cardFocus = void 0;
var card = document.querySelectorAll('.catalog__item');
var cardFocus = function cardFocus() {
  card.forEach(function (item) {
    item.addEventListener('focus', function () {
      closeCard();
      item.classList.add('catalog__item--focused');
      item.querySelector('.card__button').focus();
    });
  });
};
exports.cardFocus = cardFocus;
var closeCard = function closeCard() {
  card.forEach(function (item) {
    if (item.classList.contains('catalog__item--focused')) {
      item.classList.remove('catalog__item--focused');
    }
  });
};

},{}],2:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.phoneValidate = void 0;
var form = document.querySelector('.form__post');
var name = document.querySelector('#form-name');
var regex = /[0-9]/g;
name.oninput = function () {
  name.value = name.value.replace(regex, '');
};
var phoneValidate = function phoneValidate() {
  var phone = document.querySelector('#form-phone');
  phone.onkeypress = function (event) {
    event = event || window.event;
    if (event.charCode && (event.charCode < 48 || event.charCode > 57)) {
      var errors = form.querySelectorAll('.error');
      for (var i = 0; i < errors.length; i++) {
        errors[i].remove();
      }
      var error = document.createElement('div');
      error.className = 'error';
      error.style.color = 'red';
      error.style.backgroundColor = '#F9FBFD';
      error.style.padding = '5px';
      error.style.marginBottom = '10px';
      error.style.width = 'max-content';
      error.innerHTML = 'Поле должно содержать только цифры';
      phone.parentElement.insertBefore(error, phone);
      return false;
    }
    if (event.charCode && (event.charCode > 48 || event.charCode < 57)) {
      var _error = document.querySelector('.error');
      _error.remove();
    }
    return false;
  };
};
exports.phoneValidate = phoneValidate;

},{}],3:[function(require,module,exports){
"use strict";

var _map = require("./map.js");
var _scroll = require("./scroll.js");
var _menu = require("./menu.js");
var _formValidate = require("./form-validate.js");
var _catalog = require("./catalog.js");
// ---------------------------------

window.addEventListener('DOMContentLoaded', function () {
  (0, _map.createMap)();
  (0, _scroll.initScroll)();
  window.addEventListener('load', function () {
    (0, _menu.menuControl)();
    (0, _formValidate.phoneValidate)();
    (0, _catalog.cardFocus)();
  });
});

},{"./catalog.js":1,"./form-validate.js":2,"./map.js":4,"./menu.js":5,"./scroll.js":6}],4:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createMap = void 0;
var ymaps = window.ymaps;
var createMap = function createMap() {
  ymaps.ready(function () {
    var myMap = new ymaps.Map('map', {
      center: [59.938631, 30.323037],
      zoom: 16
    }, {
      searchControlProvider: 'yandex#search'
    });
    var myPlacemark = new ymaps.Placemark([59.937640428077046, 30.32269367724605], {}, {
      iconLayout: 'default#image',
      iconImageHref: './img/sprite/map-pin.svg',
      iconImageSize: [18, 22]
      // iconImageOffset: [18, 22],
    });

    myMap.geoObjects.add(myPlacemark);
  });
};

/* const ymaps = window.ymaps;

setTimeout(function () {
  let elem = document.createElement('script');
  elem.type = 'text/javascript';
  elem.src = '//api-maps.yandex.ru/2.0/?load=package.standard&lang=ru-RU&onload=getYaMap';
  document.getElementsByTagName('body')[0].appendChild(elem);
}, 2000);

function createMap() {
  let myMap = new ymaps.Map('map', {center: [30.325, 59.935], zoom: 13});
  ymaps.geocode('Санкт-Петербург, ул. Невский проспект, 28').then(function (res) {
    let coord = res.geoObjects.get(0).geometry.getCoordinates();
    let myPlacemark = new ymaps.Placemark(coord);
    myMap.geoObjects.add(myPlacemark);
    myMap.setCenter(coord);
  });
} */

/* const yandexMapsScript = document.createElement('script');
const key = '6b492866-f739-4d69-9dbc-9ff50d70ea08';

yandexMapsScript.src = `https://api-maps.yandex.ru/2.1/?apikey=${key}&lang=ru_RU`;

document.body.appendChild(yandexMapsScript);

yandexMapsScript.addEventListener('load', function () {
  window.dispatchEvent(new Event('mapWasLoaded'));
}); */

/* const createMap = () => {
  let myMap = new window.ymaps.Map('map', {
    center: [59.938635, 30.323118],
    zoom: 15,
  }, {
    searchControlProvider: 'yandex#search',
  });

  const myPlacemark = new window.ymaps.Placemark([59.938635, 30.323118], {
    hintContent: 'Круизы в Антарктику',
  }, {
    iconLayout: 'default#image',
    iconImageHref: './img/sprite/map-pin.svg',
    iconImageSize: [18, 22],
    iconImageOffset: [-9, -22],
  });

  myMap.geoObjects
      .add(myPlacemark);
};

export {createMap};
 */
exports.createMap = createMap;

},{}],5:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.menuControl = void 0;
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
var INTERECTIVE_SELECTORS = ['a', 'button', 'input', 'textarea', '[tabindex]'];
var openButton = document.querySelector('.navigation__toggle');
var logo = document.querySelector('.navigation__logo-link');
var header = document.querySelector('.header');
var MenuWindow = /*#__PURE__*/function () {
  function MenuWindow(doc, menu) {
    _classCallCheck(this, MenuWindow);
    this.doc = doc;
    this.menu = menu;
    this.interactiveElementsList = [];
    this.blockElementsList = [];
  }
  _createClass(MenuWindow, [{
    key: "create",
    value: function create() {
      var elements = this.doc.querySelectorAll(INTERECTIVE_SELECTORS.toString());
      var element;
      for (var i = 0; i < elements.length; i++) {
        element = elements[i];
        if (!this.menu.contains(element)) {
          if (element.getAttribute('tabindex') !== '-1') {
            element.setAttribute('tabindex', '-1');
            this.interactiveElementsList.push(element);
          }
        }
      }

      /* let children = this.doc.header.children;
      for (let i = 0; i < children.length; i++) {
        element = children[i];
        if (!this.menu.contains(element)) {
          if (element.getAttribute('aria-hidden') !== 'true') {
            element.setAttribute('aria-hidden', 'true');
            this.blockElementsList.push(element);
          }
        }
      } */
    }
  }, {
    key: "remove",
    value: function remove() {
      var element;
      while (this.interactiveElementsList.length !== 0) {
        element = this.interactiveElementsList.pop();
        element.setAttribute('tabindex', '0');
      }
      while (this.interactiveElementsList.length !== 0) {
        element = this.interactiveElementsList.pop();
        element.setAttribute('aria-gidden', 'false');
      }
    }
  }]);
  return MenuWindow;
}();
/* const showPrompt = () => {
  const form = document.querySelector('.navigation');
  const container = document.querySelector('.header');
  const lastElem = form.elements[form.elements.length - 1];
  const firstElem = form.elements[0];

  lastElem = (e) => {
    if (e.key === 'Tab' && !e.shiftKey) {
      firstElem.focus();
      return false;
    }
    return false;
  };

  firstElem = (e) => {
    if (e.key === 'Tab' && e.shiftKey) {
      lastElem.focus();
      return;
    }
  };

  container.style.display = 'block';
};

openButton.onclick = () => {
  showPrompt();
}; */
var menu = new MenuWindow(document, header);
var menuControl = function menuControl() {
  var closeMenu = function closeMenu(event) {
    var target = event.target;
    if (target === header || event.code === 'Escape' || target.closest('.navigation__link')) {
      header.classList.remove('is-open');
      menu.remove();
      document.body.classList.remove('scroll-lock');
    }
    document.removeEventListener('keydown', closeMenu);
  };
  var openMenu = function openMenu() {
    header.classList.remove('no-js');
    header.classList.toggle('is-open');
    menu.create();
    logo.focus();
    document.body.classList.toggle('scroll-lock');
    document.addEventListener('keydown', closeMenu);
  };
  openButton.addEventListener('click', openMenu);
  header.addEventListener('click', closeMenu);
};
exports.menuControl = menuControl;

},{}],6:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.initScroll = void 0;
function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
/* const anchors = document.querySelectorAll('a[href*="#"]');

const scroll = () => {
  for (let anchor of anchors) {
    anchor.addEventListener('click', function (e) {
      e.preventDefault();

      const blockID = anchor.getAttribute('href').substr(1);

      document.getElementById(blockID).scrollIntoView({
        behavior: 'smooth',
        block: 'start',
      });
    });
  }
};
 */

/* const scroll = () => {
  document.querySelectorAll('a[href^="#"').forEach((link) => {
    link.addEventListener('click', function (e) {
      e.preventDefault();
      let href = link.getAttribute('href').substring(1);

      const scrollTarget = document.getElementById(href);
      const topOffset = document.querySelector('.header').offsetHeight;
      const elementPosition = scrollTarget.getBoundingClientRect().top;
      const offsetPosition = elementPosition - topOffset;

      window.scrollBy({
        top: offsetPosition,
        behavior: 'smooth',
      });
    });
  });
}; */

var scroll = document.querySelectorAll('a[href^="#"]');
var initScroll = function initScroll() {
  var _iterator = _createForOfIteratorHelper(scroll),
    _step;
  try {
    var _loop = function _loop() {
      var smoothLink = _step.value;
      smoothLink.addEventListener('click', function (e) {
        e.preventDefault();
        var id = smoothLink.getAttribute('href');
        document.querySelector(id).scrollIntoView({
          behavior: 'smooth',
          block: 'start'
        });
      });
    };
    for (_iterator.s(); !(_step = _iterator.n()).done;) {
      _loop();
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }
};
exports.initScroll = initScroll;

},{}]},{},[3])


//# sourceMappingURL=main.min.js.map
